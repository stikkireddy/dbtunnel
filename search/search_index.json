{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DBTunnel","text":"<p>Proxy solution to run elegant Web UIs natively inside databricks notebooks.</p>"},{"location":"#purpose","title":"Purpose","text":"<p>DBTunnel is a feature that helps you with very little code take a script in various  frameworks and host it on a databricks cluster in a secure fashion. It supports common  frameworks like gradio, chainlit, fastapi, shiny-python, solara, streamlit, etc. The goal of DBTunnel is that you will not have any \"DBTunnel\" code or logic in your actual app. It is  separate driver notebook that you can use to properly wire your app in a Databricks Cluster.</p>"},{"location":"#framework-support-roadmap","title":"Framework Support / Roadmap","text":"<ul> <li> FastAPI</li> <li> Gradio</li> <li> Stable Diffusion WebUI</li> <li> Streamlit</li> <li> NiceGUI</li> <li> Flask</li> <li> Dash</li> <li> Bokeh</li> <li> Shiny for Python</li> <li> Panel</li> <li> Solara</li> <li> ChainLit</li> <li> code-server</li> </ul> <p>There are various examples for you to try out!</p>"},{"location":"#disclaimer","title":"Disclaimer","text":"<p>dbtunnel is not developed, endorsed not supported by Databricks. It is provided as-is; no warranty is derived from using this package.  For more details, please refer to the license.</p>"},{"location":"architecture/","title":"Architecture","text":"<p>Here is a high level architecture diagram of a user's request going through the process of retrieving data. This is not the situation with all apps but this is very feasible.</p> <p>Keep in mind that the code of DBTunnel is the yellow bit of the diagram. The rest is the user's code.  The proxy intercepts the requests and rewrites the html and js files to allow for the app to be hosted behind a proxy  as needed. The reason for doing this is a lot of these apps are not designed to run/sit behind proxies. They expect to be served at the root of the domain. And they send pre-rendered HTML that does not take into the location of the browser window location. DBTunnel proxy rewrites are a stop gap.</p> <p>Traffic flows through in the following order:</p> <ol> <li>The user's browser</li> <li>The Databricks Driver Proxy URL</li> <li>The Driver Proxy</li> <li>The DBTunnel Proxy (for most frameworks)</li> <li>The DBTunnel ASGI proxy handles http requests and websocket requests separately </li> <li>The User's App (gradio, chainlit, etc.)</li> <li>[Optional] DBSQL connector/mlflow deployment client/requests library</li> <li>[Optional] DBSQL Warehouse / Model serving endpoint / Jobs / etc.</li> <li>[Optional] Unity Catalog / Databricks Clusters / etc.</li> </ol> <p></p> <p></p>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#instructions","title":"Instructions","text":"<ol> <li>Log in to your databricks workspace</li> <li>Run any cluster with no isolation shared or single user cluster with unity catalog.</li> <li>Clone the repo into the workspace or import specific notebooks</li> <li>Run the notebook end to end and click the url. Make sure you click the databricks url and not <code>localhost</code>, <code>0.0.0.0</code> or <code>10.x.x.x</code> urls.</li> </ol>"},{"location":"examples/#examples-repo","title":"Examples Repo","text":""},{"location":"examples/#examples_1","title":"Examples","text":"<ol> <li>fastapi \u2705</li> <li>gradio \u2705</li> <li>stable diffusion webui \u2705</li> <li>streamlit \u2705</li> <li>flask \u2705</li> <li>dash \u2705</li> <li>bokeh \u2705</li> <li>shiny for python \u2705</li> <li>solara \u2705</li> <li>chainlit \u2705</li> <li>code-server on repos \u2705</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"getting-started/bokeh/","title":"Bokeh (TBD)","text":""},{"location":"getting-started/chainlit-instructions/","title":"Chainlit Integration in dbtunnel","text":""},{"location":"getting-started/chainlit-instructions/#description","title":"Description","text":"<p>Build production-ready Conversational AI applications in minutes, not weeks \u26a1\ufe0f. This integration lets you run chainlit applications inside databricks clusters.</p>"},{"location":"getting-started/chainlit-instructions/#installation","title":"Installation","text":"<p>To use Chainlit, you can install it along with the required dependencies using the following command:</p> <pre><code>%pip install dbtunnel[asgiproxy,chainlit]\ndbutils.library.restartPython()\n</code></pre>"},{"location":"getting-started/chainlit-instructions/#driver-notebook-setup","title":"Driver Notebook Setup","text":"<p>To set up the driver notebook for Chainlit, follow these steps:</p> <ol> <li> <p>Get the current directory and specify the path to your Chainlit script file:</p> <pre><code>import os\n\ncurrent_directory = os.getcwd()\nscript_path = current_directory + \"/chainlit_example.py\"\n</code></pre> </li> <li> <p>Import the dbtunnel library and run the chainlit script</p> <pre><code>from dbtunnel import dbtunnel\ndbtunnel.chainlit(script_path).run()\n</code></pre> </li> </ol>"},{"location":"getting-started/chainlit-instructions/#chainlit-specific-code","title":"Chainlit Specific Code","text":"<p>In your Chainlit script (chainlit_example.py), you can define custom logic for your chainlit application.  The provided code snippet is a basic example that responds to incoming messages:</p> chainlit_example.py<pre><code>import chainlit as cl\n\n@cl.on_message\nasync def main(message: cl.Message):\n    # Your custom logic goes here...\n\n    # Send a response back to the user\n    await cl.Message(\n        content=f\"Received: {message.content}\",\n    ).send()\n</code></pre>"},{"location":"getting-started/code-server/","title":"Code Server (TBD)","text":""},{"location":"getting-started/dash/","title":"Dash (TBD)","text":""},{"location":"getting-started/fastapi/","title":"FastAPI (TBD)","text":""},{"location":"getting-started/flask/","title":"flask (TBD)","text":""},{"location":"getting-started/gradio/","title":"Gradio Integration in dbtunnel","text":""},{"location":"getting-started/gradio/#description","title":"Description","text":"<p>Gradio allows you to create easy-to-use ML demos, UIs for Python scripts, and more. The dbtunnel integration with Gradio enables you to run these interfaces in the context of dbtunnel, facilitating seamless interaction with your data and models.</p>"},{"location":"getting-started/gradio/#basic-usage","title":"Basic Usage","text":""},{"location":"getting-started/gradio/#installation","title":"Installation","text":"<p>To use Gradio within dbtunnel, first install the dbtunnel package with Gradio support:</p> <pre><code>%pip install dbtunnel[gradio]\ndbutils.library.restartPython()\n</code></pre>"},{"location":"getting-started/gradio/#gradio-specific-code","title":"Gradio Specific Code","text":"<p>To create a Gradio interface, define your functions and set up the Gradio blocks as follows:</p> <pre><code>import gradio as gr\n\ndef combine(a, b):\n    return a + \" \" + b\n\ndef mirror(x):\n    return x\n\nwith gr.Blocks() as demo:\n    txt = gr.Textbox(label=\"Input\", lines=2)\n    txt_2 = gr.Textbox(label=\"Input 2\")\n    txt_3 = gr.Textbox(value=\"\", label=\"Output\")\n    btn = gr.Button(value=\"Submit\")\n    btn.click(combine, inputs=[txt, txt_2], outputs=[txt_3])\n\n    with gr.Row():\n        im = gr.Image()\n        im_2 = gr.Image()\n\n    btn = gr.Button(value=\"Mirror Image\")\n    btn.click(mirror, inputs=[im], outputs=[im_2])\n\n    gr.Markdown(\"## Text Examples\")\n    gr.Examples([[\"hi\", \"Adam\"], [\"hello\", \"Eve\"]], [txt, txt_2], txt_3, combine, cache_examples=True)\n</code></pre>"},{"location":"getting-started/gradio/#run-your-app","title":"Run your app","text":"<p>Integrate the Gradio app with dbtunnel and run it as follows in another cell:</p> <pre><code>from dbtunnel import dbtunnel\ndbtunnel.gradio(demo).run() # demo is the name of the interface we have\n</code></pre> <p>This setup allows you to create interactive demos for your projects within the dbtunnel framework,  leveraging Gradio's intuitive UI components.</p>"},{"location":"getting-started/gradio/#advanced-file-based-usage-with-gradio","title":"Advanced File based Usage with Gradio","text":"<p>Lets take a look at decoupling gradio code from the driver notebook to run.  We can use the same demo as above, lets create a file called gradio_example.py</p> gradio_example.py<pre><code>import gradio as gr\nimport os\n\n\ndef combine(a, b):\n    return a + \" \" + b\n\n\ndef mirror(x):\n    return x\n\n\nwith gr.Blocks() as demo:\n\n    txt = gr.Textbox(label=\"Input\", lines=2)\n    txt_2 = gr.Textbox(label=\"Input 2\")\n    txt_3 = gr.Textbox(value=\"\", label=\"Output\")\n    btn = gr.Button(value=\"Submit\")\n    btn.click(combine, inputs=[txt, txt_2], outputs=[txt_3])\n\n    with gr.Row():\n        im = gr.Image()\n        im_2 = gr.Image()\n\n    btn = gr.Button(value=\"Mirror Image\")\n    btn.click(mirror, inputs=[im], outputs=[im_2])\n\n    gr.Markdown(\"## Text Examples\")\n    gr.Examples(\n        [[\"hi\", \"Adam\"], [\"hello\", \"Eve\"]],\n        [txt, txt_2],\n        txt_3,\n        combine,\n        cache_examples=True,\n    )\n\nif __name__ == \"__main__\":\n  demo.queue().launch(\n    server_name=os.getenv(\"GRADIO_SERVER_NAME\"), \n    server_port=int(os.getenv(\"GRADIO_SERVER_PORT\")),\n  )\n</code></pre> <p>Then in the driver notebook we can run the following to retrieve the current path to the gradio file:</p> <pre><code>import os\n\ncurrent_directory = os.getcwd()\nscript_path = current_directory + \"/gradio_example.py\"\nif os.path.exists(script_path) is False:\n  raise Exception(f\"File doesnt exist: {script_path}\") \n</code></pre> <p><code>script_path</code> contains the path to the gradio file and we can pass that to dbtunnel to  run that in a separate process using uvicorn. </p> <pre><code>from dbtunnel import dbtunnel\ndbtunnel.gradio(path=script_path).run()\n</code></pre> <p>Then you should get a link to the app:</p> <pre><code>[2024-01-31T17:46:53+0000] [INFO] {gradio.py:_run:99} - Use this link to access the Gradio UI in Databricks: \nhttps://dbc-dp-.....cloud.databricks.com/driver-proxy/o/...../..../.../\n</code></pre>"},{"location":"getting-started/setup/","title":"Setup","text":""},{"location":"getting-started/setup/#1-requirements","title":"1: Requirements","text":"<p>You need access to a databricks workspace with the following things:</p> <ol> <li>A single node cluster with \"no isolation shared\" mode and ability to download python packages from pypi<ol> <li>You can optionally create a single user cluster but only you will be able to access the web ui</li> </ol> </li> <li>[Optional] Unity catalog access (to secure data, tables and ml models)</li> <li>[Optional] Serverless SQL Warehouse (to securely access data in Unity Catalog)</li> <li>[Optional] Users have the ability to make pat tokens (for user authentication)</li> </ol>"},{"location":"getting-started/setup/#2-notebook-setup","title":"2: Notebook Setup","text":"<p>The notebook will typically start with:</p> <pre><code>%pip install dbtunnel[gradio,asgiproxy]\ndbutils.library.restartPython()\n</code></pre> <p>The previous command installs the dbtunnel library along with the framework reqs. It also restarts python interpreter.</p> <p>We will go into the various frameworks in more detail.</p> <p>Once it is installed:</p> <pre><code>from dbtunnel import dbtunnel\ndbtunnel.gradio(path=\"path/to/script/in/workspace.py\").run()\n</code></pre> <p>There are additional arguments and options in dbtunnel to do various things.</p>"},{"location":"getting-started/setup/#3-running-the-notebook","title":"3: Running the notebook","text":"<p>Warning</p> <p>Please do not use the url that starts with <code>0.0.0.0</code> or <code>localhost</code> or <code>10.x.x.x</code> as it will not work since thats local  inside the databricks driver. </p> <p>Once you run the notebook you will see a link to the web ui.  You can share this link with anyone who has access to the databricks workspace who can attach to that cluster.</p> <pre><code>[2024-01-31T17:46:53+0000] [INFO] {gradio.py:_run:99} - Use this link to access the Gradio UI in Databricks: \nhttps://dbc-dp-.....cloud.databricks.com/driver-proxy/o/...../..../8080/\n</code></pre>"},{"location":"getting-started/shiny-python/","title":"Shiny for Python (TBD)","text":""},{"location":"getting-started/solara/","title":"Solara (TBD)","text":""},{"location":"getting-started/stable-diffusion-webui/","title":"Stable Diffusion WebUI (TBD)","text":""},{"location":"getting-started/streamlit/","title":"Streamlit (TBD)","text":""}]}